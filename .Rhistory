rep("NULL", 3),
rep("character",147))
)
PMLhead[,1:10]
PMLfull <- read.table(
"C:\\Users\\steve\\Desktop\\Coursera\\MachLearn\\pml-training.csv",
header = TRUE, sep = ",", na.strings = "#DIV/0!",
)[, c(-1, -2:5)]
PMLfull <- read.table(
"C:\\Users\\steve\\Desktop\\Coursera\\MachLearn\\pml-training.csv",
header = TRUE, sep = ",", na.strings = "#DIV/0!",
)[, -c(1, 2:)]
PMLfull <- read.table(
"C:\\Users\\steve\\Desktop\\Coursera\\MachLearn\\pml-training.csv",
header = TRUE, sep = ",", na.strings = "#DIV/0!",
)
summary(PMLfull[,1:5])
summary(PMLfull[,6:10])
summary(PMLfull[,11:15])
summary(PMLfull[,16:20])
summary(PMLfull[,21:25])
summary(PMLfull[,26:30])
summary(PMLfull[,31:35])
summary(PMLfull[,36:40])
summary(PMLfull[,41:45])
summary(PMLfull[,46:50])
summary(PMLfull[,51:55])
summary(PMLfull[,56:60])
summary(PMLfull[,61:65])
summary(PMLfull[,66:70])
summary(PMLfull[,71:75])
summary(PMLfull[,76:80])
summary(PMLfull[,81:85])
summary(PMLfull[,86:90])
summary(PMLfull[,91:95])
summary(PMLfull[,96:100])
summary(PMLfull[,101:105])
summary(PMLfull[,106:110])
summary(PMLfull[,111:115])
summary(PMLfull[,116:120])
summary(PMLfull[,121:125])
summary(PMLfull[,126:130])
summary(PMLfull[,131:135])
summary(PMLfull[,136:140])
summary(PMLfull[,141:145])
summary(PMLfull[,146:150])
summary(PMLfull[,151:155])
summary(PMLfull[,156:160])
PMLuseful <- PMLfull[, c(2, 6:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160 )]
PMLuseful$classe <- as.factor(PMLuseful$classe)
summary(PMLuseful)
PMLuseful$user_name <- as.factor(PMLuseful$user_name)
PMLtest <- read.table(
"C:\\Users\\steve\\Desktop\\Coursera\\MachLearn\\pml-testing.csv",
header = TRUE, sep = ",")[, c(2, 6:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160 )]
PMLtest$classe <- as.factor(PMLtest$classe)
PMLtest$user_name <- as.factor(PMLtest$user_name)
PMLtest
PMLtest <- read.table(
"C:\\Users\\steve\\Desktop\\Coursera\\MachLearn\\pml-testing.csv",
header = TRUE, sep = ",")
summary(PMLtest)
PMLtest <- read.table(
"C:\\Users\\steve\\Desktop\\Coursera\\MachLearn\\pml-testing.csv",
header = TRUE, sep = ",")[, c(2, 6:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160 )]
PMLtest$user_name <- as.factor(PMLtest$user_name)
PMLtest$problem_id
one.mdl <-train(classe ~ ., PMLuseful, method = "rpart)
")"
one.mdl <-train(classe ~ ., PMLuseful, method = "rpart")
plot(one.mdl)
plot(one.mdl$finalModel)
labels(one.mdl$finalModel)
text(one.mdl$finalModel)
one.pred <- predict(one.mdl, PMLtest)
plot(one.pred)
one.pred
summary(PMLuseful$classe)
two.mdl <-train(classe ~ ., PMLuseful, method = "rf")
two.pred <- predict(two.mdl, PMLtest)
plot(two.pred)
save.image("C:/Users/steve/Desktop/Coursera/MachLearn/CourseraMachLearn/middle.RData")
varImp(two.mdl)
?varImp
summary(PMLuseful$num_window)
three.mdl <-train(classe ~ ., PMLuseful, method = "C5.0")
three.mdl <-train(classe ~ ., PMLuseful, method = "J48")
three.mdl <-train(classe ~ ., PMLuseful, method = "JRip")
three.mdl <-train(classe ~ ., PMLuseful, method = "knn")
three.pred <- predict(three.mdl, PMLtest)
summary(PMLuseful)
summary(PMLuseful[, -c(2,3)])
PML <- PMLuseful[, -c(2,3)]
knn.mdl <- knn3(classe ~ ., data = PML, k=5)
plot(knn.mdl)
knn.mdl
knn.pred <- predict(knn.mdl, PMLtest[, -c(2,3)])
plot(knn.pred)
knn.pred
two.mdl <-train(classe ~ ., PML, method = "rf")
two.mdl
varImp(two.mdl)
two.pred
two.mdl <-train(classe ~ ., PML, method = "rf")
library(caret)
two.mdl <-train(classe ~ ., PML, method = "rf")
extracting sunbeams from cucumbers
varImp(two.mdl)
?write
rfVarList <- varImp(two.mdl)
two.pred <- predict(two.mdl, PMLtest[, -c(2,3)])
plot(two.pred)
two.pred
save(two.mdl, file = "caretRandomForestOut.rds")
knn.mdl <- knn3(classe ~ ., data = PML, k=5)
knn.pred <- predict(knn.mdl, PMLtest[, -c(2,3)])
knn.pred
two.pred
library()
library()
library(shiny)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(predictors)
head(diagnosis)
data(concrete)
adData <- data.frame(diagnosis, predictors)
adData
inTrain <- createDataPartition(diagnosis, 0.5)
inTrain <- createDataPartition(diagnosis, 0.5, list=FALSE)
library(caret)
data(AlzheimerDisease)
head(predictors)
head(diagnosis)
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(diagnosis, 0.5)
testing <- mixtures[ -inTrain, ]
inTrain <- createDataPartition(diagnosis, p=0.5)
testing <- mixtures[ -inTrain, ]
inTrain <- createDataPartition(diagnosis, p=0.5, list=FALSE)
testing <- mixtures[ -inTrain, ]
hist(mixtures$CompressiveStrength)
hist(ln(mixtures$CompressiveStrength)
)
hist(log(mixtures$CompressiveStrength))
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(diagnosis, p=0.5, list=FALSE)
testing <- mixtures[ -inTrain, ]
training <- mixtures[ inTrain, ]
set.seed(3433)
data(AlzheimerDisease)
# adData <- data.frame(diagnosis, predictors[,grep("IL", names(predictors))])
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 0.75)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
train(adData[,grep("^IL", names(predictors))], adData$diagnosis, method = "glm", preProcess = "pca")
preProcess(training)
preProcess(training[, grep("^IL", names(predictors))])
#quizwork
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(predictors)
head(diagnosis)
data(concrete)
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(diagnosis, p=0.5, list=FALSE)
testing <- mixtures[ -inTrain, ]
training <- mixtures[ inTrain, ]
set.seed(975)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
hist(mixtures$CompressiveStrength)
#Q5
library(AppliedPredictiveModeling)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
# adData <- data.frame(diagnosis, predictors[,grep("IL", names(predictors))])
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 0.75)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
train(adData[,grep("^IL", names(predictors))], adData$diagnosis, method = "glm", preProcess = "pca")
preProcess(training[, grep("^IL", names(predictors))], preProcess = "pca")
#Q3.1
library(AppliedPredictiveModeling)
library(caret)
data(segmentationOriginal)
summary(segmentationOriginal )
segTran <- segmentationOriginal[segmentationOriginal$Case == "Train",]
set.seed(125)
segmdl <- train(Class ~ ., data=segTran, model = "rpart")
preProcess(training[, grep("^IL", names(predictors))], preProcess = "pca")
?prePRocess
library(caret)
?preProcess
q4 <- preProcess(training[, grep("^IL", names(predictors))], preProcess = "pca")
q4$mean
q4$numComp
q4$numcomp
preProcess(training[, grep("^IL", names(predictors))], preProcess = "pca", thresh = 0.8)
q4 <- preProcess(training[, grep("^IL", names(predictors))], preProcess = "pca", thresh = 0.8)
q4$numcomp
q4$numComp
q4
q4 <- preProcess(training[, grep("^IL", names(predictors))], method = "pca", thresh = 0.8)
q4$numComp
q4 <- preProcess(training[, grep("^IL", names(predictors))], method = "pca", thresh = 0.9)
q4$numComp
q5a <- train(adData[,grep("^IL", names(predictors))], adData$diagnosis, method = "glm", preProcess = "pca")
q5b <- train(adData[,grep("^IL", names(predictors))], adData$diagnosis, method = "glm")
predict(q5a, testing)
predict(q5b, testing)
?predict
pca <- predict(q5a, testing)
nonpca <- predict(q5b, testing)
pca <- predict(q5a)
pca
str(pca)
str(nonpca)
?test
?train
pca$finalModel
q5a$finalModel
q5b$finalModel
confusionMatrix(pca, training$diagnosis)
confusionMatrix(pca, testing$diagnosis)
dim(pca)
pca <- predict(q5a, newdata = testing)
nonpca <- predict(q5b, newdata = testing)
confusionMatrix(nonpca, testing$diagnosis)
q5a <- train(training[,grep("^IL", names(predictors))], training$diagnosis, method = "glm", preProcess = "pca")
pca <- predict(q5a, newdata = testing)
pca
str(pca)
str(nonpca)
confusionMatrix(pca, nonpca)
dim(nonpca)
dim(pca)
str(q5a)
q5a$finalModel
q5ab$finalModel
q5b$finalModel
pca <- predict(q5a$finalModel, newdata = testing)
t4 <- preProcess(testing[, grep("^IL", names(predictors))], preProcess = "pca", thresh = 0.8)
pca <- predict(q5a$finalModel, newdata = t4)
pca <- predict(q5a)
pca
nonpca
pca <- predict(q5a, t4)
rfVarList
head(concrete$SuperPlasticizer)
library(AppliedPredictiveModeling)
head(concrete$SuperPlasticizer)
library(caret)
head(concrete$SuperPlasticizer)
data(AlzheimerDisease)
data(concrete)
head(concrete$SuperPlasticizer)
head(concrete)
head(concrete$Superplasticizer)
hist(concrete$Superplasticizer)
nonpca <- predict(q5b, newdata = testing)
set.seed(3433)
set.seed(3433)
data(AlzheimerDisease)
# adData <- data.frame(diagnosis, predictors[,grep("IL", names(predictors))])
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 0.75)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
q4 <- preProcess(training[, grep("^IL", names(predictors))], preProcess = "pca", thresh = 0.8)
t4 <- preProcess(testing[, grep("^IL", names(predictors))], preProcess = "pca", thresh = 0.8)
q5a <- train(training[,grep("^IL", names(predictors))], training$diagnosis, method = "glm", preProcess = "pca")
q5b <- train(training[,grep("^IL", names(predictors))], training$diagnosis, method = "glm")
pca <- predict(q5a, t4)
nonpca <- predict(q5b, newdata = testing)
preProcess?
?preProcess
preProcess(inTrain, thresh = .8)
q4
str(q4)
q4$k
preProcess(training[, grep("^IL", names(predictors))], preProcess = "pca", thresh = 0.8)
varImp(q4)
q4$numComp
head(q4)
q4b <- preProcess(training[, grep("^IL", names(predictors))], preProcess = "pca", thresh = 0.9)
q4b$mean
q4b
summary(q4)
summary(q4b)
q4b <- preProcess(training[, grep("^IL", names(predictors))], method = "pca", thresh = 0.9)
q4b
q4 <- preProcess(training[, grep("^IL", names(predictors))], method = "pca", thresh = 0.8)
q5a <- train(training[,grep("^IL", names(predictors))], training$diagnosis, method = "glm", preProcess = "pca")
q5b <- train(training[,grep("^IL", names(predictors))], training$diagnosis, method = "glm")
pca <- predict(q5a, t4)
nonpca <- predict(q5b, newdata = testing)
summary(nonpca)
nonpca
?predict
head(q5)
head(q5b)
summary(q5b)
summary(q5a)
t4 <- preProcess(testing[, grep("^IL", names(predictors))], method = "pca", thresh = 0.8)
q5a <- train(training[,grep("^IL", names(predictors))], training$diagnosis, method = "glm", preProcess = "pca")
pca <- predict(q5a, t4)
?confusionMatrix
confusionMatrix(q5a, t4)
confusionMatrix(q5a)
confusionMatrix(q5b)
libary(pgmm)
data(olive)
olive <- Olive[, -1]
molive <- rpart(olive$Area ~ ., olive)
newdata  <- as.data.frame(t(colMeans(olive)))
predict(molive, newdata)
library(pgmm)
data(olive)
olive <- Olive[, -1]
molive <- rpart(olive$Area ~ ., olive)
newdata  <- as.data.frame(t(colMeans(olive)))
predict(molive, newdata)
data(olive)
olive <- olive[, -1]
molive <- rpart(olive$Area ~ ., olive)
newdata  <- as.data.frame(t(colMeans(olive)))
predict(molive, newdata)
?rpart
library(rpart)
olive <- olive[, -1]
molive <- rpart(olive$Area ~ ., olive)
newdata  <- as.data.frame(t(colMeans(olive)))
predict(molive, newdata)
head olice
head(olive)
str(olive)
library(pgmm)
data(olive)
head(olive)
olive <- olive[, -1]
molive <- rpart(olive$Area ~ ., olive)
newdata  <- as.data.frame(t(colMeans(olive)))
predict(molive, newdata)
data(olive)
olive <- olive[, -1]
molive <- rpart(as.factor(olive$Area) ~ ., olive)
newdata  <- as.data.frame(t(colMeans(olive)))
predict(molive, newdata)
predict(molive, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace = F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
summary(trainSA)
set.seed(13234)
frml <- "chd ~ age + alcohol + obesity + tobacco + typea + ldl"
modelSA <- glm( frml , data = trainSA, family = "binomial")
missClass <- function(values, prediction) {sum(((prediction > 0.5) * 1) != values)/length(values)}
missClass(trainSA$chd, predict(modelSA, trainSA))
missClass(testSA$chd, predict(modelSA, testSA))
data(vowel.train)
data(vowel.test)
set.seed(33833)
RFFIT <- train(y ~ ., data = vowel.train, method="rf")
varImp(RFFIT)
RFFIT
varImp(RFFIT)
summary(RFFIT)
str(RFFIT)
RFFIT$importance
RFFIT$xlevvels
RFFIT$xlevels
?varImp
RFFIT$ffinalModel
RFFIT$finalModel
str(RFFIT$finalModel)
RFFIT$finalModel$xlevels
RFFIT$xlevels
summary(RFFIT$xlevels)
varImp(RFFIT)
varImp(RFFIT)
levels(RFFIT)
summary(vowel.train)
RFFIT <- train(y ~ ., data = vowel.train, method="rf")
varImp(RFFIT)
library(caret)
varImp(RFFIT)
RFFIT <- train(y ~ ., data = vowel.train, method="rf")
varImp(RFFIT)
plot(segmdl)
plot(segmdl1)
plot(segTran.cart)
segTran.cart <- rpart(Class ~ FiberWidthCh1
#                      + VarIntenCh4
+ PerimStatusCh1
+ TotalIntenCh2, segTran)
plot(segTran.cart)
text(segTran.cart)
RFFIT
caret::varImp(RFFIT)
?install.packages
data(vowel.train)
data(vowel.test)
set.seed(33833)
RFFIT <- train(y ~ ., data = vowel.train, method="rf")
varImp(RFFIT)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
RFFIT <- train(y ~ ., data = vowel.train, method="rf")
varImp(RFFIT)
varImp(RFFIT)
varImp(RFFIT)
varImp(RFFIT)
RFFIT$finalModel
varImp(RFFIT$finalModel)
?varImp
varImp(RFFIT, useModel = FALSE)
set.seed(33833)
RFFIT <- train(y ~ ., data = vowel.train, method="rf")
varImp(RFFIT, useModel = FALSE)
varImp(RFFIT)
varImp(RFFIT, useModel=TRUE)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
rf.mod <- train(vowel.train[,-1], vowel.train$y, method = "rf")
gbm.mod <- train(vowel.train[,-1], vowel.train$y, method = "gbm")
str(gbm.mod)
gbm.mod$Accuracy
one.pred <- predict(one.mdl, PMLtest)
plot(one.pred)
rfVarList
two.pred <- predict(two.mdl, PMLtest[, -c(2,3)])
plot(two.pred)
two.pred
?write
write.table(two.mdl, "randomForestResults")
save(two.mdl, "RandomForestResults")
save(two.mdl, file = "RandomForestResults")
test.mdl <- load(randomForestResults)
test.mdl <- load("RandomForestResults")
test.pred. <= predict(test.mdl, PMLtest[,c(2,3)])
test.pred. <- predict(test.mdl, PMLtest[,c(2,3)])
str(test.mdl)
two.mdl
save(two.mdl, file = "RandomForestResults")
test.mdl <- load("andomForestResults)
""
)
test.mdl <- load("RandomForestResults")
test.mdl
save("two.mdl", file = "RandomForestResults")
test.mdl <- load("RandomForestResults")
test.mdl
save.image("C:/Users/steve/Desktop/Coursera/MachLearn/CourseraMachLearn/RandomForestResults.rds.RData")
saveRDS(two.mdl, file = "RandomForestResults")
test.mdl <- loadRDS("RandomForestResults")
test.mdl <- readRDS("RandomForestResults")
varImp(test.mdl)
library(caret)
varImp(test.mdl)
two.pred
??forest
RFFIT$confusion
RFFIT
rf.pred <- predict(two.mdl, PMLtest[, -c(2,3)])
rf.pred
str(rf.pred)
summary(rf.pred)
str(two.mdl)
two.mdl$confusion
two.mdl$results
two.mdl$err.rate
two.mdl$votes
two.mdl$proximity
varImpPlot(two.mdl)
varImpPlot(RFFIT)
class(varImpPlot)
class(two.mdl)
?train
two.mdl$times
two.mdl$times$everything
two.mdl$times$everything[3]/3600
two.mdl$resample
summary(two.mdl$resample)
summary(two.mdl)
summary(two.mdl$oob.times)
two.mdl$oob.times
two.mdl$confusion
two.mdl$error.rate
two.mdl$errorrate
two.mdl$err.rate
two.mdl$forest
two.mdl$tuneValue
summary(two.mdl)
summary(two.mdl$call)
two.mdl$call
two.mdl$confusion
two.mdl$importance
summary(two.mdl)
two.mdl$results
summary(two.mdl$results)
